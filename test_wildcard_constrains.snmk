import os.path as op

datasets = ["iris", "cars"]

#wildcard_constraints:
#    num="\d+"

# replacements = [x.replace('.sph', '.wav').replace('/audio/', f'/wav_{SAMPLE_RATE}/')
#            for x in glob(f"{STAGE}/{CHALLENGE}_{LANGUAGE}/*/audio/*")]
# rule all:
#     input:
#         expand("{your_path}.extension", replacements)

        
rule all:
    input:
        # "out/all_text.txt",
        # "out/nested/all_text.txt",
        # op.join("out", 'nested', 'cars', 'iris', 'text_cars.txt'),
        "out/nested/all_text_asterisk.txt"
        

wildcard_constraints:
    something=".*"
    
rule fake_text:
    output:
        text_file = "out/text_{dataset}.txt"
    shell:
        """
        echo "{wildcards.dataset}" > {output.text_file}
        """

rule nest:
    input:
        text_file = "out/text_{dataset}.txt"
    output:
        nested = (op.join("out", 'nested', '{something}', 'text_{dataset}.txt'))
    params:
        nested_dir = (op.join("out", 'nested', '{something}'))
    shell:
        """
        mkdir -p {params.nested_dir}
        echo "{input.text_file} {wildcards.dataset} {params.nested_dir}" > {output.nested}
        """

rule nest_two:
    input:
        text_file = "out/{dataset}/text_{dataset}.txt"
    output:
        nested = (op.join("out", 'nested', '{something}', '{something}', 'text_{dataset}.txt'))
    params:
        nested_dir = (op.join("out", 'nested', '{something}', '{something}'))
    shell:
        """
        mkdir -p {params.nested_dir}
        echo "{input.text_file} {dataset} {params.nested_dir}" > {output.nested}
        """


rule gather_nested:
    input:
         expand(op.join("out", 'nested', '{something}', "{something}",  "text_{dataset}.txt"),
                dataset = datasets,
                something = datasets),
         expand(op.join("out", 'nested', '{something}', "text_{dataset}.txt"),
                dataset = datasets,
                something = datasets)
    output:
        "out/nested/all_text_asterisk.txt"
    shell:
        """
        cat {input} > {output}
        """

def nest_input(datasets, something, nest = 2):
    if nest == 2:
        ni = expand(op.join("out", 'nested', '{something}', "{something}",  "text_{dataset}.txt"),
                    dataset = datasets,
                    something = datasets)
    else:
        ni = expand(op.join("out", 'nested', '{something}', "text_{dataset}.txt"),
                    dataset = datasets,
                    something = datasets)
    return(ni)

def nest_output():
    return('foo')


    

rule gather_nested:
    input:
         expand(op.join("out", 'nested', '{something}', "{something}",  "text_{dataset}.txt"),
                dataset = datasets,
                something = datasets),
         expand(op.join("out", 'nested', '{something}', "text_{dataset}.txt"),
                dataset = datasets,
                something = datasets)
    output:
        "out/nested/all_text_asterisk.txt"
    shell:
        """
        cat {input} > {output}
        """
        
